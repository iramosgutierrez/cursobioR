---
title: "Tema 2. Manejo y filtrado de datos de biodiversidad."
format:
  html:
    toc: true
    toc-depth: 4
    toc-location: left
    toc_float: true
    css: estilos.css
engine: knitr
filters:
  - webr
---

# Objetivos

-   Introducir el paquete `tidyverse` y su filosofía.

-   Aprender a importar, explorar, transformar y filtrar datos.

-   Aplicar funciones clave de `dplyr` y `tidyr` en datos reales de biodiversidad.

-   Diagnosticar errores comunes al manipular datos.

# Introducción y filosofía de `tidyverse`

Cuando empezamos a trabajar con datos en R, es fácil sentirse abrumado por los corchetes, los signos raros y las funciones que parecen acertijos. Aquí es donde entra el **universo** **tidyverse**, una colección de paquetes que hacen que trabajar con datos sea más **intuitivo**, **ordenado** y, sobre todo, **legible**.

## ¿Qué es el universo tidyverse?

El universo tidyverse es como una caja de herramientas moderna para R. Incluye paquetes como `dplyr`, `ggplot2`, `tidyr`, `readr`, entre otros, que están diseñados para que el código se lea **de izquierda a derecha**, como si estuvieras contando una historia.

Lo primero que hay que hacer es instalarse los paquetes de tidyverse.

```{webr-r}
install.packages("tidyverse")
library(tidyverse)
```

Ahora aprenderemos a usar algunas de las funciones más importantes de `tidyverse`

## 1. Seleccionar columnas y filtrar filas

Vamos a seguir trabajando con la base de datos de comunidades de Alberta que puedes descargar [aquí](https://github.com/ngmedina/UAMBioDivR/blob/main/Alberta%20grassland/grassland.community.csv)

#### Ejercicio 1. ¿Recuérdas cómo se cargaba?

```{webr-r}
# # Escribe aquí tu respuesta
```

<button 
  onclick="let x=document.getElementById('sol1'); x.style.display = (x.style.display==='none') ? 'block':'none';"
  style="background-color:#407FD0; color:white; border:none; padding:6px 12px; border-radius:5px; cursor:pointer;"
>

Mostrar/Ocultar solución

</button>

::: {#sol1 style="display:none; margin-top:10px; border:1px solid #ccc; padding:10px; border-radius:5px;"}
Solución:\

```{webr-r}
alberta <- read.csv("https://raw.githubusercontent.com/ngmedina/UAMBioDivR/main/Alberta%20grassland/grassland.community.csv")
```
:::

### Seleccionar columnas

Para seleccionar columnas usamos la función `select()`. Empecemos con un ejemplo sencillo, escoger las columnas plot y Carex filifolia.

```{webr-r}
select(alberta, plot, Carex_filifolia)
```

**TIP**: Prueba a seleccionar otras columnas

La función `select()` es muy flexible y tiene muchos argumentos, dentro de esos argumentos podemos usar funciones. Por ejemplo, podemos seleccionar todas las columnas de las especies de Artemisia utilizando la función `starts_with()` dentro de `select()`

```{webr-r}
select(alberta, starts_with("Artemisia"))
```

Hay muchas otras funciones para facilitar seleccionar conjuntos de columnas como `ends_with()`, `contains()`. Puedes encontrar más ejemplos en este [enlace](https://tidyselect.r-lib.org/reference/starts_with.html)

### Filtrar filas

También podemos filtrar filas. Para ello usamos la función filter().

Por ejemplo, para filtrar todas las parcelas donde Antennaria parviflora tiene más de 2 individuos usamos:

```{webr-r}
# 1. Filtrar parcelas con Antennaria_parvifolia > 0
f1 <- filter(alberta, Antennaria_parvifolia > 0)
head(f1)
# 2. Filtrar parcelas con Artemisia_frigida > 20
f2 <- filter(alberta, Artemisia_frigida > 20)
head(f2)
# 3. Filtrar parcelas con Antennaria_parvifolia > 0 Y Artemisia_frigida > 20
f3 <- filter(alberta, Antennaria_parvifolia > 0, Artemisia_frigida > 20)
head(f3)
```

## 2. Pipes

El operador pipe `%>%` (pipe) es uno de los más interesantes en tidyverse, en vez de escribir funciones dentro de funciones (como en base R), en tidyverse podemos conectar pasos de forma secuencial usando este operador.

Vamos con un ejemplo sencillo:

```{webr-r}
v <- c(4, 6, 5)
v %>% mean()
```

Fíjaos que el código de arriba es equivalente a `mean(n)`. El operador pipe `%>%` se puede entender como "y después haz". Lo que hace es coger el resultado del código que está a la izquierda y pasarlo como primer argumento a la función que está a la derecha

#### Ejercicio 2 ¿Y si queremos hacer la raíz cuadrada de la media? ¿Cómo haríamos usando `%>%`?

```{webr-r}
# Escribe aquí tu respuesta
```

<button 
  onclick="let x=document.getElementById('sol2'); x.style.display = (x.style.display==='none') ? 'block':'none';"
  style="background-color:#407FD0; color:white; border:none; padding:6px 12px; border-radius:5px; cursor:pointer;"
>

Mostrar/Ocultar solución

</button>

::: {#sol2 style="display:none; margin-top:10px; border:1px solid #ccc; padding:10px; border-radius:5px;"}
Solución:\

```{webr-r}
v <- c(4, 6, 5)
v %>% mean() %>% sqrt()
```
:::

Ahora vamos a trabajar con la base de datos de Alberta

#### Ejercicio 3 Selecciona solo las columnas de Antennaria y filtra las parcelas donde Artemisia_frigida tenga abundancia mayor que 20.

```{webr-r}
# Escribe aquí tu respuesta
```

<button 
  onclick="let x=document.getElementById('sol3'); x.style.display = (x.style.display==='none') ? 'block':'none';"
  style="background-color:#407FD0; color:white; border:none; padding:6px 12px; border-radius:5px; cursor:pointer;"
>

Mostrar/Ocultar solución

</button>

::: {#sol3 style="display:none; margin-top:10px; border:1px solid #ccc; padding:10px; border-radius:5px;"}
Solución:\

```{webr-r}
# Seleccionar columnas de Antennaria
alberta %>%
  select(plot, starts_with("Antennaria")) %>%
  filter(Artemisia_frigida > 20)
```
:::

Es importante tener en cuenta que el pipe pasa al primer argumento de la función. Cuando queremos pasar el resultado del pipe a un arguemnto que no es el primero de la función hay que poner un punto . para especificar donde debería ir.

## 3. Mutate: Crear y modificar columnas

Vamos a explorar la forma en la que podemos crear y modificar columnas con la función `mutate`. Por ejemplo, vamos a crear una nueva columna multiplicando por 10 la abundancida de la especie Antennaria parviflora

```{webr-r}
alberta %>%
  mutate(double_antennaria = Antennaria_parvifolia * 2)
```

La función es muy flexible y nos permite hacer operaciones bastante complejas en un solo paso. Por ejemplo, podemos crear una variable categórica que sea "sí" cuando *Antennaria parviflora* es mayor 10 y "No" cuando es menor o igual a 10.

```{webr-r}
alberta %>%
  mutate(high_antennaria = if_else(Antennaria_parvifolia > 10, "Sí", "No"))
```

O calcular el porcentaje de la especie con respecto al total

```{webr-r}
alberta %>%
  mutate(total_abund = rowSums(select(., -plot)),
         perc_frigida = (Artemisia_frigida / total_abund) * 100)
```

#### 4. Tidyverse y los gráficos. Introducción a ggplot2

`ggplot2` es un paquete del tidyverse para crear gráficos de manera declarativa. La idea básica es **“gramática de gráficos”**. Se utiliza la función `ggplot`, hay que definir tres elementos:

1.  Los datos que quieres graficar (`data = …`)

2.  Estética (`aes()`), qué variables van a los ejes, colores, tamaños, etc.

3.  Geometría (`geom_…`), cómo se representa la información (puntos, barras, líneas, cajas…).

Así, los pasos para hacer un gráfico son:

### **Pasos para hacer un gráfico**

1.  Elegir la variable para el eje x y el eje y.

2.  Elegir el tipo de gráfico:

```         
-   `geom_point()` → scatterplot (puntos)

-   `geom_col()` → barras

-   `geom_boxplot()` → cajas

-    `geom_line()` → líneas
```

3.  Añadir etiquetas y títulos para que el gráfico sea fácil de entender.

Veamos un ejemplo con la base de datos de Alberta en el que representaremos la abundancia de *Artemisia frigida* en todas las parcelas

```{webr-r}
alberta %>%
  ggplot(aes(x = plot, y = Artemisia_frigida)) +  # eje x = parcelas, eje y = abundancia
  geom_col() +                                   # tipo de gráfico: barras
  labs(title = "Abundancia de Artemisia_frigida por parcela",
       x = "Parcela",
       y = "Abundancia") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))  # girar etiquetas del eje x
```

-   `aes(x = plot, y = Artemisia_frigida)` indica qué variables van a los ejes,

-   `geom_col()` dibuja barras verticales.

-   `labs()` añade títulos y etiquetas.

-   `theme(axis.text.x = element_text(angle = 90, hjust = 1))` gira los nombres de las parcelas para que se lean mejor.
