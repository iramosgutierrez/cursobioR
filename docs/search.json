[
  {
    "objectID": "Tema3-1-Indices.html",
    "href": "Tema3-1-Indices.html",
    "title": "Tema 3. Primera parte - Índices de diversidad",
    "section": "",
    "text": "En la próxima sesión vamos a explorar índices de biodiversidad. Para ello vamos a emplear bases de datos de la abundancia de especies en herbazales de Alberta en Estados Unidos con el que ya estáis familiarizados. La base de datos original podéis descargarla aquí\nRecordad que los los datos provienen de un estudio de plantas que se realizó en parcelas de 20 x 20 m. Los datos de abundancia corresponden la cobertura de cada especie en proporción al total de la parcela.\n\n\nVamos a cargar los datos directamente de una página web. En R esto es muy sencillo si los datos tienen el formato adecuado. De hecho, vamos a emplear el mismo código que empleamos cuando cargamos datos desde un archivo guardado en nuestro ordenador.\nPara ver el formato en el que los datos están almacenados en la nube pinchad aquí\nCargamos los datos:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\ny echamos un vistazo a las primeras filas para comprobar que los datos se han cargado correctamente\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema3-1-Indices.html#cargar-datos",
    "href": "Tema3-1-Indices.html#cargar-datos",
    "title": "Tema 3. Primera parte - Índices de diversidad",
    "section": "",
    "text": "Vamos a cargar los datos directamente de una página web. En R esto es muy sencillo si los datos tienen el formato adecuado. De hecho, vamos a emplear el mismo código que empleamos cuando cargamos datos desde un archivo guardado en nuestro ordenador.\nPara ver el formato en el que los datos están almacenados en la nube pinchad aquí\nCargamos los datos:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\ny echamos un vistazo a las primeras filas para comprobar que los datos se han cargado correctamente\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema3-1-Indices.html#resumen-de-datos",
    "href": "Tema3-1-Indices.html#resumen-de-datos",
    "title": "Tema 3. Primera parte - Índices de diversidad",
    "section": "Resumen de datos",
    "text": "Resumen de datos\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nComprobamos las dimensiones de nuestra matriz que nos dicen el número de parcelas (primer número, filas) y el número de especies (segundo número, columnas)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema3-1-Indices.html#representación-de-datos",
    "href": "Tema3-1-Indices.html#representación-de-datos",
    "title": "Tema 3. Primera parte - Índices de diversidad",
    "section": "Representación de datos",
    "text": "Representación de datos\nAdemás, es buena idea representar histogramas de distribución de datos. Por ejemplo de las especies. Esta gráfica nos muestra que en la mayor parte de las cuadrículas Antennaria parviflora tiene un cobertura entre 0 y 10 % pero que en alguna de las cuadrículas puede llegar a ocupar el 70%\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema3-1-Indices.html#otras-operaciones-para-explorar-los-datos",
    "href": "Tema3-1-Indices.html#otras-operaciones-para-explorar-los-datos",
    "title": "Tema 3. Primera parte - Índices de diversidad",
    "section": "Otras operaciones para explorar los datos",
    "text": "Otras operaciones para explorar los datos\nPodemos ver qué especie es la más abundante. Para ello tenemos que sumar los valores de cada columna. Podríamos hacerlo columna a columna. Por ejemplo, para la especie de la segunda columna que es Antennaria parviflora\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSi tenemos 100 especies esto implicaría repetir el código de arriba 100 veces. Sin embargo, existe una forma rápida y sintética de hacer esto mismo utilizando la función ColSums.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAdemás podemos ver cuál de las parcelas tiene la mayor cobertura\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema1-Intro2.html",
    "href": "Tema1-Intro2.html",
    "title": "Tema 1. Segunda parte - Introducción general a R.",
    "section": "",
    "text": "Ya hemos visto que R es un lenguaje orientado a objetos. En esta parte del tema nos vamos a centrar en entender esto mejor y explorar los distintos tipos de objetos."
  },
  {
    "objectID": "Tema1-Intro2.html#r-un-lenguaje-orientado-a-objetos",
    "href": "Tema1-Intro2.html#r-un-lenguaje-orientado-a-objetos",
    "title": "Tema 1. Segunda parte - Introducción general a R.",
    "section": "",
    "text": "Ya hemos visto que R es un lenguaje orientado a objetos. En esta parte del tema nos vamos a centrar en entender esto mejor y explorar los distintos tipos de objetos."
  },
  {
    "objectID": "Tema1-Intro2.html#tipos-de-objetos",
    "href": "Tema1-Intro2.html#tipos-de-objetos",
    "title": "Tema 1. Segunda parte - Introducción general a R.",
    "section": "2. Tipos de objetos",
    "text": "2. Tipos de objetos\nCada tipo de objeto tiene unas propiedades determinadas que estudiaremos poco a poco. Los objetos más sencillos son los vectores. Los tipos objetos de R qué trabajaremos son en principio: vectores, listas, matrices y data frames.\n\n2.1 Vectores\nUn vector es una secuencia o concatenacion de valores.\n\nCómo crear vectores\nPara definir un vector utilizamos la función c(). Dentro de los paréntesis indicamos los valores que queremos concatenar. Algunos ejemplos son:\n\n\nEjercicio 1. Crear vectores\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nEjercicio 2: Crear vectores de secuencias de números\nTambién podemos utilizar la función seq() para generar secuencias de números en un rango determinado\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAcordaros que podemos generar un vector de datos numericos de esta manera, pero si queremos guardarlo como un objeto debemos asignarle un nombre utilizando este simbolo &lt;-\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTambién podemos utilizar el símbolo : para hacer secuencias de números, o de números y texto. Podemos utilizar la función class() para preguntar de qué clase son los elementos que contiene un vector. La única regla para un vector es que solo puede contener elementos de una misma clase.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nEjercicio 3. Averiguar la longitud de un vector\nOtra función interesante es la función length(). Sirve para conocer la longitud de un vector.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n¿Cuál es la longitud de este otro vector?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nCómo acceder a los elementos de un vector\nPodemos utilizar los [] para preguntarle a un vector por valores en posiciones concretas. Por ejemplo en el vector v, consulto el valor del elemento en la posición 3.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOJO ¿Qué crees que pasará si le asigno un valor no numérico?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema1-Intro2.html#qué-es-la-clase-categoría-de-un-objeto-en-r",
    "href": "Tema1-Intro2.html#qué-es-la-clase-categoría-de-un-objeto-en-r",
    "title": "Tema 1. Segunda parte - Introducción general a R.",
    "section": "2.2 ¿Qué es la clase (categoría) de un objeto en R?",
    "text": "2.2 ¿Qué es la clase (categoría) de un objeto en R?\nEn R, cada objeto tiene una clase, que le dice al lenguaje qué tipo de cosa es ese objeto y cómo debe tratarlo.\n\n\n\n\n\n\nMetáfora: la mochila de cada objeto\nImagina que cada objeto en R lleva una mochila con una etiqueta que dice:\n\n“Soy un número”, “Soy una tabla”, “Soy un texto”, “Soy una fecha”…\n\nEsa etiqueta es su clase. R la usa para saber qué puede hacer con ese objeto.\n\n\n¿Cómo averiguar la clase?\nUsamos la función class() para averiguarlo:\n\nEjercicio 4. Averiguar la clase (categoría) de un objeto\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nEjercicio 5. Explorando la importancia de la clase\nCaso 1: objeto\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n¿Qué aprendemos de esto?\n\nLas funciones en R dependen de la clase del objeto.\nSi usas una función con una clase no compatible, R te dará un mensaje de error.\nPor eso es útil usar class() o str() para diagnosticar antes de aplicar funciones.\n\nNOTA IMPORTANTE todos los elementos dentro de un vector deben ser de la misma clase\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n2.2 Listas\nLas listas son un tipo especial de objeto que puede contener elemento de diferentes clases.\nEs como un cajón de sastre: puedes meter dentro números, textos, vectores, tablas, funciones… Incluso se pueden crear listas de listas. Vamos que puedes meter lo que quieras en una lista\n\n¿Qué diferencia a una lista de un vector?\n\nUn vector normal (como c(1, 2, 3)) solo puede contener elementos del mismo tipo: todos números, o todos textos.\nUna lista, en cambio, puede mezclar tipos: puedes tener un número, un vector, una tabla, una función… todo junto.\n\n\n\nCómo crear listas\nLas listas se crean con la función list(), la cual puede tomar un número arbitrario de argumentos:\nPodemos crear una lista sencilla de elementos de la misma clase\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nO listas con elementos de clases diferentes\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nO volvernos locos y anidar listas con elementos de clases diferentes\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nCómo acceder a los elementos de una lista\nPodemos acceder por al posición de cada elemento dentro de la lista utilizando los [], parecido a cómo hacíamos con los vectores.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nmilista[1]: devuelve una sublista:\n\nEl resultado sigue siendo una lista, que contiene el primer elemento.\nEs útil si quieres mantener la estructura de lista.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nmilista[[1]]: devuelve el contenido del primer elemento\n\nEl resultado es el objeto que está dentro, no una lista.\n\nEs útil si quieres trabajar directamente con el valor.\n¿Y con las listas anidadas? ¿Cómo accedemos a los valores?\n\n\nEjercicio 5. Prueba a cambiar el número de corchetes en los dos niveles de selección\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nLos elementos de una lista pueden tener nombre\nLos elementos de una lista pueden tener nombre.\n\n\nEjercicio 6. Averiguar y poner nombre a los elementos de una lista\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nEjercicio 7. Buscar el elemento de la lista por nombre\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n2.3 Matrices\nEn R, una matriz es una estructura de datos bidimensional que contiene elementos del mismo tipo (por ejemplo, todos numéricos o todos caracteres). Es como una tabla sin nombres de columnas ni filas, donde cada celda tiene una posición definida por su fila y columna.\n\nCómo crear una matriz\nPara crear matrices utilizamos la función matrix(). La función matrix() permite organizar los datos en una matriz con tantas filas y columnas como se indiquen. Debemos indicar por lo tanto, el número de filas, el número de columnas y los datos que queremos que aparezcan en su interior. En este caso, los datos se aportan en forma de vector.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nAcceso a los elementos de una matriz\nPara acceder a los elementos de una matriz utilizamos los [], pero indicamos en su interior la posición de la fila y la columna a la cual queremos acceder. Con la , indicamos “todo” (todas las filas o todas las columnas)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nCambiar valores dentro de una matriz\nVeamos primero cómo recortar la matriz y asignarle un nombre:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPara cambiar valores concretos dentro de la matriz, primero accedermos a ese elemento y le asignamos otro valor:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTambién podemos seleccionar una submatriz, y sustituirla por otra matriz del mismo tamaño:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n2.4 Data frames\nLos data frames se utilizan para almacenar datos en formas de tablas. Es decir, en filas y columnas como se utilizan habitualmente en Excell. Esta tablas o data frames pueden almacenar datos de diferentes tipos: números, character, enteros (integer)…En un data frame cada columna representa una variable, y cada columna puede contener un tipo de elemento diferente. A diferencia de las matrices que solo pueden contener elementos del mismo tipo.\nUna de las limitaciones del data frame, es que todas las columnas tienen que tener la misma longitud. Si no fuese así, sería UNA LISTA, es decir una coleccion de objetos o variables de cualquier, tipo, longitud o estructura.\nNormalmente cuando cargamos una base de datos, o importamos una colección de datos, estamos creando un data frame. Ahora podéis comprobar que la colección de datos iris que hemos cargado anteriormente es un data frame.\n\n2.4.1 Como crear un data frame\nVamos a pedir ayuda a R sobre la función data.frame()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPodemos crear un data frame con la función data.frame()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTambién se puede crear el data frame de forma directa, sin generar los vectores previamente, así:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAhora vamos a consultar diferentes atributos con las funciones class(), mode(), is.data.frame() y is.list()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nUna característica interesantes es que un data frame también es una lista. Pero cuidado, una lista no es un data.frame. Para serlo tiene que cumplir el requisito de que todos los elementos que contiene tengan la misma longitud.\notras funciones interesantes para conocer un data frame:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n2.4.1 Acceso a los elementos de un data frame\nPara acceder a los elementos de un data frame se utilizan los [] y $, de forma similar a como hemos venido haciendo con vectores y listas.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSe pueden hacer otro tipo de consultas que nos devuelven un vector.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nVamos a acceder a los datos utilizando el simbolo $\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOtras consultas que puedo hacer sobre los datos del data frame es con las funciones dimnames(), rownames(), colnames(), table(), head() y tail()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bienvenid@ al curso de Análisis de la biodiversidad en R y SIG",
    "section": "",
    "text": "Bienvenid@ al curso de Análisis de la biodiversidad en R y SIG\nEste curso es parte de la asignatura “Análisis de la biodiversidad en R y SIG” del Máster en Biodiversidad de la Universidad Autónoma de Madrid. Lo que está aquí recogido es la parte que corresponde al análisis de la biodiversidad en R.\nPuedes consultar el programa de la asignatura aquí\nEste curso es el resultado del trabajo colectivo de varios profesores. Si quieres utilizarlo puedes hacerlo pero recuerda citar la fuente.\nPara empezar a abrir boca vamos a rellenar una encuesta"
  },
  {
    "objectID": "Tema1-Intro1.html",
    "href": "Tema1-Intro1.html",
    "title": "Tema 1. Primera parte - Introducción general a R",
    "section": "",
    "text": "Comprender qué es R y cómo instalarlo.\nEjecutar comandos básicos en R.\nFamiliarizarse con RStudio y su interfaz.\nImportar y exportar datos en distintos formatos.\nOrganizar el trabajo en proyectos de R."
  },
  {
    "objectID": "Tema1-Intro1.html#objetivos-de-aprendizaje",
    "href": "Tema1-Intro1.html#objetivos-de-aprendizaje",
    "title": "Tema 1. Primera parte - Introducción general a R",
    "section": "",
    "text": "Comprender qué es R y cómo instalarlo.\nEjecutar comandos básicos en R.\nFamiliarizarse con RStudio y su interfaz.\nImportar y exportar datos en distintos formatos.\nOrganizar el trabajo en proyectos de R."
  },
  {
    "objectID": "Tema1-Intro1.html#qué-es-r",
    "href": "Tema1-Intro1.html#qué-es-r",
    "title": "Tema 1. Primera parte - Introducción general a R",
    "section": "1. ¿Qué es R?",
    "text": "1. ¿Qué es R?\n\nR es un lenguaje de programación libre y gratuito, especialmente indicado para análisis estadístico y elaboración de gráficos.\nTodo el código de R está disponible como software libre bajo las condiciones de licencia GNU-GPL. Esto implica que cualquier usuario final puede usar, estudiar, compartir (copiar) y modificar el software.\nPuedes acceder al proyecto R en: http://www.r-project.org"
  },
  {
    "objectID": "Tema1-Intro1.html#instalación-de-r",
    "href": "Tema1-Intro1.html#instalación-de-r",
    "title": "Tema 1. Primera parte - Introducción general a R",
    "section": "2. Instalación de R",
    "text": "2. Instalación de R\nSigue las instrucciones en https://cran.r-project.org/ para instalar R según tu sistema operativo.\n\n2.1 Usuarios de Windows\nPara usuarios de Windows, selecciona el enlace ‘Download R for Windows’, luego haz clic en el enlace ‘base’ y finalmente en ‘Download R 4.3.3 for Windows’. Esto iniciará la descarga del archivo de instalación .exe.\nUna vez completada la descarga, haz doble clic en el archivo ejecutable de R y sigue las instrucciones en pantalla.\nLas instrucciones completas de instalación se pueden encontrar en el sitio web de CRAN.\n\n\n\n2.2 Usuarios de Mac\nPara usuarios de Mac, selecciona el enlace ‘Download R for (Mac) OS X’. El archivo binario se puede descargar seleccionando ‘R-4.3.3.pkg’.\nUna vez descargado, haz doble clic en el icono del archivo y sigue las instrucciones en pantalla para completar los pasos necesarios.\nConsulta el documento ‘R for Mac OS X FAQ’ para más información sobre la instalación.\n\n\n\n2.3 Usuarios de Linux\nPara usuarios de Linux, el método de instalación dependerá de la distribución que estés utilizando. Hay instrucciones bastante completas para Debian, Redhat, Suse y Ubuntu.\nEn la mayoría de los casos, puedes usar el gestor de paquetes de tu sistema operativo para instalar R desde el repositorio oficial.\nEn Ubuntu, abre una terminal y ejecuta los siguientes comandos (necesitarás permisos de administrador):\nsudo apt update\nsudo apt install r-base\nSi recibes un error al ejecutar los comandos anteriores, puede que necesites añadir una entrada a tu archivo sources.list. Para hacerlo, abre el archivo /etc/apt/sources.list en tu editor de texto favorito (gedit, vim, nano, etc.) y añade la siguiente línea (también necesitarás permisos de administrador):\ndeb https://cloud.r-project.org/bin/linux/ubuntu disco-cran35/\nUna vez hecho esto, vuelve a ejecutar los comandos apt anteriores y deberías estar listo para comenzar.\n\n\n2.4 Primeros ejercicios: Aprende a utilizar la consola de R\n\nAbre la consola de R\n\n\n\nEjercicio 1: Imprimir valores\n\"Bienvenidos al curso de R y SIG\"\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nEjercicio 2: Operar\nEl uso más sencillo que se le puede dar a R es el de una calculadora. Consideremos las siguientes operaciones:\n\nSumar: +\nRestar: -\nMultiplicar: *\nDividir: /\nExponenciar: ^\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nEjercicio 3: Crear objetos con &lt;-\nObjetivo: Guardar valores en objetos para usarlos más adelante.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjercicio 3. Crea el objeto y y asignale el valor 3\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nImprime el objeto y\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nEjercicio 4: Operar con objetos\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nEjercicio 5: Utilizar funciones\n¿Qué es una función en R?\nUna función en R es una herramienta que realiza una tarea específica. Si piensas en analizar datos como si fuera cocinar las funciones son como robots de cocina: le das una entrada (argumentos o ingredientes), realiza una operación (pica, tritura o calienta), y te devuelve una salida (resultado, plato hecho).\nR viene con un montón de funciones listas para usar. Por ejemplo, la función mean() calcula la media de un conjunto de números.\n¿Cómo usar funciones ya creadas?\nPara utilizar las funciones en R solo necesitas:\n\nEscribir el nombre de la función.\nProporcionar los argumentos necesarios entre paréntesis.\n\nEjemplo 1: Funciones con un argumento. Calcular la media y la raíz cuadrada\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjemplo 2: Funciones con más de un argumento. Logaritmo y redondeo\nAlgunas funciones en R necesitan más de un dato para funcionar. Por ejemplo, si quieres redondear un número, puedes decirle cuántos decimales usar. Puedes escribir los datos en orden o decirle a R cuál es cuál usando el nombre del argumento. Así tienes más control sobre lo que hace la función.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEn los ejemplos de arriba hemos nombrado los argumentos de forma explícita pero esto no es estrictamente necesario. Si no se nombran la función opera igualmente\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPero OJO 👀 si no nombramos los argumentos no se pueden cambiar de orden\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema1-Intro1.html#qué-es-rstudio",
    "href": "Tema1-Intro1.html#qué-es-rstudio",
    "title": "Tema 1. Primera parte - Introducción general a R",
    "section": "3. ¿Qué es RStudio?",
    "text": "3. ¿Qué es RStudio?\nRStudio es un entorno de desarrollo integrado (IDE, por sus siglas en inglés) diseñado específicamente para trabajar con el lenguaje de programación R. Es una herramienta que facilita la escritura de código, la visualización de datos, la creación de gráficos y la elaboración de informes."
  },
  {
    "objectID": "Tema1-Intro1.html#instalación-de-rstudio",
    "href": "Tema1-Intro1.html#instalación-de-rstudio",
    "title": "Tema 1. Primera parte - Introducción general a R",
    "section": "4. Instalación de Rstudio",
    "text": "4. Instalación de Rstudio\n\n4.1 Windows\n\nVe a la página oficial: https://posit.co/download/rstudio-desktop/\nHaz clic en Download RStudio for Windows.\nEjecuta el archivo .exe descargado.\nSigue los pasos del instalador (siguiente, siguiente… ¡listo!).\n\n\n\n4.2 Linux\n\nElige tu distribución (Ubuntu, Fedora, etc.) en la página de descargas.\nDescarga el archivo .deb (para Ubuntu/Debian) o .rpm (para Fedora).\nInstala desde terminal:\n\nsudo dpkg -i rstudio-x.yy.zzz-amd64.deb\n\n\n4.3 macOS\n\nDescarga el instalador para macOS desde la misma página.\nAbre el archivo .dmg y arrastra RStudio a la carpeta Aplicaciones.\nÁbrelo desde Launchpad o Finder."
  },
  {
    "objectID": "Tema1-Intro1.html#primeros-pasos-en-rstudio",
    "href": "Tema1-Intro1.html#primeros-pasos-en-rstudio",
    "title": "Tema 1. Primera parte - Introducción general a R",
    "section": "5. Primeros pasos en RStudio",
    "text": "5. Primeros pasos en RStudio\nAl abrir RStudio verás cuatro paneles principales. El más importante es la consola, donde puedes ejecutar comandos.\n\n\n5.1 Consola\nFunción: Ejecutar código y ver resultados inmediatos\nConsejo: Ideal para pruebas rápidas y exploración\nEs igual que la consola que hemos manejado cuando hemos abierto R sin Rstudio (ver ejercicios 1 a 5)\n\n\n5.2 Panel de edición (Script)\nFunción: Escribir y guardar código en archivos .R, .Rmd o .qmd\nConsejo: Ejecuta líneas con Ctrl + Enter (Windows/Linux) o Cmd + Enter (macOS\n🧾 ¿Qué es un script en R? Un script en R es un archivo de texto donde puedes escribir, guardar y reutilizar conjuntos de instrucciones. Es como una libreta de recetas para tus análisis de datos.\n🧑‍🍳 Una metáfora culinaria: Si pensamos en el análisis de datos como si fuera una actividad de cocina, un script sería como tu libro de cocina:\n\nCada línea de código es como un paso de una receta. Puedes seguirla paso a paso, modificar ingredientes (datos) o repetirla cuando quieras. Guardar tus scripts te permite documentar tu trabajo y reproducir tus análisis fácilmente.\n\n\nEjercicio 6: Crea y guarda tu primer script\nEn este ejercicio aprenderás a crear tu primer script en R usando RStudio. Un script es un archivo donde puedes escribir y guardar tu código para ejecutarlo más tarde.\nPaso 1: Abrir el editor de scripts\nVe al menú File &gt; New File &gt; R Script.\nPaso 2: Escribir tu primer script de código\nEscribe el siguiente código en el script:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPaso 3: Guarda tu primer script\nUna vez que hayas escrito tu código en el editor de panel de edición, sigue estos pasos para guardarlo:\n\nHaz clic en el menú File (Archivo).\nSelecciona Save o presiona el atajo de teclado Ctrl + S (Windows/Linux) o Cmd + S (macOS).\nElige una carpeta donde quieras guardar tu archivo.\nEscribe un nombre para tu script, por ejemplo: primer_script.R\nHaz clic en Guardar.\n\n\n\nEjercicio 7: Ejecuta el código del script\nEjecutar una sola línea\n\nColoca el cursor en la línea que quieres ejecutar.\nPresiona Ctrl + Enter (Windows/Linux) o Cmd + Enter (macOS).\nEl resultado aparecerá en la consola (panel inferior izquierdo).\n\nEjecutar varias líneas\n\nSelecciona varias líneas de código con el ratón o el teclado.\nPresiona Ctrl + Enter o Cmd + Enter.\nTodas las líneas seleccionadas se ejecutarán en orden.\n\nEjecutar todo el script\n\nVe al menú Code &gt; Run Region &gt; Run All\no haz clic en el botón Source (ícono de hoja con flecha verde) en la parte superior del script.\nTambién puedes usar el atajo Ctrl + Shift + Enter (Cmd + Shift + Enter en macOS).\nTodo el contenido del script se ejecutará en la consola.\n\n\n\n\n5.3 Entorno de trabajo / Historial\nFunción: Ver objetos creados (variables, funciones, etc.) y el historial de comandos\nConsejo: Útil para revisar qué has hecho y qué está disponible\nEn R, el entorno de trabajo es el espacio donde se almacenan los objetos que creamos (vectores, funciones, data frames, etc.). Podemos inspeccionar, modificar y limpiar este entorno usando funciones específicas.\n\nEjercicio 8: Crear, listar y borrar objetos en el entorno de trabajo\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n5.4 Archivos / Gráficos / Paquetes / Ayuda / Viewer\n\nFunciones:\n\nVer gráficos generados\nGestionar paquetes\nConsultar ayuda de funciones\nNavegar por archivos del proyecto\n\n\nEste panel de RStudio permite gestionar varios aspectos clave del entorno de trabajo. Vamos a centrarnos en paquetes, con ejemplos aplicados a biodiversidad.\nPaquetes Los paquetes en R son colecciones de funciones, datos y documentación que amplían las capacidades básicas del lenguaje. Para trabajar con biodiversidad, hay paquetes muy útiles que permiten cargar datos ecológicos, calcular índices de diversidad, y visualizar mapas o redes de especies.\n\n¿Cómo se instalan y cargan?\nADVERTENCIA: Los siguientes ejercicios requieren el paquete vegan, que no está disponible en webR. Para ejecutarlo, usa R en tu ordenador local.\n\ninstall.packages(\"vegan\")\nlibrary(vegan)\n\n\n\n¿Cómo se usan los paquetes?\n\n?vegan\nhelp(\"vegan\")\n\n\n\nEjercicio 9. Uso de la función specnumber del paquete vegan\n\n# Datos de abundancia de especies en dos sitios para el ejercicio\ndatos &lt;- data.frame(\n  sitio1 = c(3, 0, 1, 5),\n  sitio2 = c(0, 2, 0, 4),\n  row.names = c(\"Aves\", \"Mamíferos\", \"Reptiles\", \"Insectos\")\n)\ndatos\n\n# Cargar el paquete\nlibrary(vegan)\n\n# explorar para qué sirve la función specnumber\n?specnumber\n\n# Calcular riqueza (número de especies presentes)\nriqueza &lt;- specnumber(datos)\nriqueza"
  },
  {
    "objectID": "Tema1-Intro1.html#aprender-a-cargar-y-guardar-datos",
    "href": "Tema1-Intro1.html#aprender-a-cargar-y-guardar-datos",
    "title": "Tema 1. Primera parte - Introducción general a R",
    "section": "6. Aprender a cargar y guardar datos",
    "text": "6. Aprender a cargar y guardar datos\n\n6.1 Importar datos al entorno de trabajo\nPara poder proceder con un análisis de datos, debemos cargar los datos en R. En este tutorial aprenderemos a importar y exportar datos en diferentes formatos. Hemos seleccionado los más comunmente utilizados.\nPodemos importar en formato texto o tabulares desde un archivo .txt o .csv Podemos importar directamente desde Excel, archivos .xls o .xlxs También existen formatos propios de R, como los .Rdata o .rda y los serialized R objects .rds\n\n\n6.2 Cargar datos integrados\nR viene con varios conjuntos de datos ya cargados que puedes usar para practicar sin tener que importar nada. Puedes escribir data() para ver la lista completa.\nPara cargar los datos integrados basta con escribir data() y el nombre de los datos.\n\n\nEjercicio 10: Cargar datos integrados\nDurante este ejercicio vamos a utilizar el conjunto o set de datos iris. Este conjunto de datos, contiene datos sobre características florales de tres especies del género Iris.\nPara cargarlo utilizaremos la función data(), y lo exploraremos utilizando la función head() que nos permite visualizar las primeras 6 filas. También vamos a introducir nuevas funciones que nos permitirán explorar el conjunto de datos iris: dim() colnames() y tail()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n6.3 Importar datos desde CSV\nAunque esta forma de importar datos puede ser muy útil para probar funciones o aprender a escribir código lo normal es que queramos cargar una base de datos propia. Uno de los formatos más sencillo de importar y que además ofrece buenas propiedades de interoperabilidad es el .csv\nVamos a trabajar con los datos de una base de datos de la abundancia de especies en herbazales de Alberta en Estados Unidos.\nLos datos de composición específica consisten típicamente en observaciones de la presencia o abundancia de las especies en diferentes localidades.\nEn el ejemplo que vamos a emplear los datos provienen de un estudio de plantas que se realizó en parcelas de 20 x 20 m. Los datos de abundancia corresponden la cobertura de cada especie en proporción al total de la parcela.\nComenzaremos por descargar los datos desde aquí\n\nNOTA: Los datos originales provienen de un taller sobre análisis de la biodiversidad en R que se pueden encontrar aquí.\nPara cargar el archivo tienes que cambiar el texto “path_to_my_data” por la ruta del archivo. Para ello:\n\nBusca el archivo en la carpeta “Descargas”\nAbre el Explorador de archivos. Ve a Descargas y localiza el archivo que quieres usar (por ejemplo, datos.csv).\nHaz clic derecho sobre el archivo\nSelecciona “Propiedades”.\nCopia la Ruta de acceso que aparece (por ejemplo: C:\\Users\\TuNombre\\Downloads\\datos.csv).\nCambia las barras invertidas \\ por barras normales /\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOJO ¿Qué ha pasado?\nCuando ejecutamos el código, R lee el archivo y muestra el contenido en la consola, pero no lo guarda. Es como mirar el resultado sin ponerle nombre: lo ves, pero no puedes volver a usarlo.\n¿Cómo guardarlo?\nPara guardar el resultado, hay que asignarlo a un objeto usando &lt;-:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nTruco: Usar el panel “Área de trabajo” para cargar archivos\n\nHaz clic en el botón “Import Dataset”\nEn el panel Environment, busca el botón que dice “Import Dataset” y haz clic.\nSelecciona “From Text (base)”\nSi tu archivo es .csv o .txt, elige esta opción.\nHaz clic en “Browse…”\nSe abrirá una ventana para buscar el archivo.\n📁 Navega a la carpeta Descargas y selecciona tu archivo.\nRStudio genera el código automáticamente\nVerás una vista previa del archivo y RStudio te mostrará el código que usará para cargarlo.\nPuedes copiar ese código para usarlo en tus scripts.\n\n\n\n\n6.4 EXTRA: Importar datos desde Excell\nImportar datos desde Excell es muy parecido a la importación de datos desde .csv. Las funciones que utilizaremos son write.xlsx() para la exportación y read.xlsx() para la importación.\n\nEjercicio Extra Importar datos desde excel\n\n# instalar el paquete\n# install.packages(\"xlsx\")  \n\n# abrir la librería\nlibrary(xlsx)  \n\nwrite.xlsx(iris, \"data/iris.xlsx\")  # acuerdate que los vamos a guardar en la carpeta datos  \n\niris_import_xlsx &lt;- read.xlsx(\"data/iris.xlsx\", 1) # debemos indicar la hoja de Excell desde la cual importar los datos"
  },
  {
    "objectID": "Tema1-Intro1.html#errores-comunes-al-cargar-archivos-csv-en-r",
    "href": "Tema1-Intro1.html#errores-comunes-al-cargar-archivos-csv-en-r",
    "title": "Tema 1. Primera parte - Introducción general a R",
    "section": "7. Errores comunes al cargar archivos CSV en R",
    "text": "7. Errores comunes al cargar archivos CSV en R\nComenzaremos por descargar los datos desde aquí\nIntenta cargar el archivo datos_con_errores.csv\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPaso 1: Verificar el entorno\n¿Está el archivo en el directorio correcto?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPaso 2: Cargar el archivo sin argumentos\nIntenta cargar el archivo tal cual. ¿Qué ves?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPregunta: ¿Qué problemas puedes detectar en los datos cargados?\n\n\n\nPaso 3: Codificación de caracteres\nAlgunos acentos pueden verse mal. Prueba con otra codificación:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPaso 4: Separadores incorrectos\nLa última fila usa punto y coma. ¿Cómo lo solucionamos?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPaso 5: Valores ausentes\nAlgunas celdas están vacías. ¿Cómo las identificamos?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPaso 6: Tipos de datos\n¿Edad es numérica?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nCorrige los tipos:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nEjercicio extra. Trabajando con fechas\n¿Fecha es tipo Date?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNOTA: Fechas en R. Si quieres ampliar pincha aquí\n\n\n\nSímbolo\nSignificado\nEjemplo\n\n\n\n\n%Y\nAño con 4 cifras\n2025\n\n\n%m\nMes con 2 cifras\n09\n\n\n%d\nDía con 2 cifras\n24\n\n\n\n\n\n\n\nPaso 7: Limpiar comillas y comentarios\nA veces, al importar datos, los nombres vienen entre comillas, como “Carlos” en lugar de Carlos. Esto puede causar problemas al filtrar, comparar o visualizar los datos.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n¿Qué hace esta línea?\n\ngsub() es una función que busca y reemplaza texto.\nEl primer argumento ('\"') indica qué queremos eliminar: las comillas dobles.\nEl segundo ('') indica con qué lo queremos reemplazar: en este caso, con nada.\nEl tercero (datos$Nombre) es la columna donde aplicamos el cambio.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPaso final: Ver datos limpios\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nReflexión: ¿Qué aprendiste sobre los errores comunes al cargar datos?"
  },
  {
    "objectID": "Tema2.html",
    "href": "Tema2.html",
    "title": "Tema 2. Manejo y filtrado de datos de biodiversidad.",
    "section": "",
    "text": "Introducir el paquete tidyverse y su filosofía.\nAprender a importar, explorar, transformar y filtrar datos.\nAplicar funciones clave de dplyr y tidyr en datos reales de biodiversidad.\nDiagnosticar errores comunes al manipular datos."
  },
  {
    "objectID": "Tema2.html#qué-es-el-universo-tidyverse",
    "href": "Tema2.html#qué-es-el-universo-tidyverse",
    "title": "Tema 2. Manejo y filtrado de datos de biodiversidad.",
    "section": "¿Qué es el universo tidyverse?",
    "text": "¿Qué es el universo tidyverse?\nEl universo tidyverse es como una caja de herramientas moderna para R. Incluye paquetes como dplyr, ggplot2, tidyr, readr, entre otros, que están diseñados para que el código se lea de izquierda a derecha, como si estuvieras contando una historia.\nLo primero que hay que hacer es instalarse los paquetes de tidyverse.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAhora aprenderemos a usar algunas de las funciones más importantes de tidyverse"
  },
  {
    "objectID": "Tema2.html#seleccionar-columnas-y-filtrar-filas",
    "href": "Tema2.html#seleccionar-columnas-y-filtrar-filas",
    "title": "Tema 2. Manejo y filtrado de datos de biodiversidad.",
    "section": "1. Seleccionar columnas y filtrar filas",
    "text": "1. Seleccionar columnas y filtrar filas\nVamos a seguir trabajando con la base de datos de comunidades de Alberta que puedes descargar aquí\n\nEjercicio 1. ¿Recuérdas cómo se cargaba?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nMostrar/Ocultar solución\n\n\nSolución:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nSeleccionar columnas\nPara seleccionar columnas usamos la función select(). Empecemos con un ejemplo sencillo, escoger las columnas plot y Carex filifolia.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTIP: Prueba a seleccionar otras columnas\nLa función select() es muy flexible y tiene muchos argumentos, dentro de esos argumentos podemos usar funciones. Por ejemplo, podemos seleccionar todas las columnas de las especies de Artemisia utilizando la función starts_with() dentro de select()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHay muchas otras funciones para facilitar seleccionar conjuntos de columnas como ends_with(), contains(). Puedes encontrar más ejemplos en este enlace\n\n\nFiltrar filas\nTambién podemos filtrar filas. Para ello usamos la función filter().\nPor ejemplo, para filtrar todas las parcelas donde Antennaria parviflora tiene más de 2 individuos usamos:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema2.html#pipes",
    "href": "Tema2.html#pipes",
    "title": "Tema 2. Manejo y filtrado de datos de biodiversidad.",
    "section": "2. Pipes",
    "text": "2. Pipes\nEl operador pipe %&gt;% (pipe) es uno de los más interesantes en tidyverse, en vez de escribir funciones dentro de funciones (como en base R), en tidyverse podemos conectar pasos de forma secuencial usando este operador.\nVamos con un ejemplo sencillo:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nFíjaos que el código de arriba es equivalente a mean(n). El operador pipe %&gt;% se puede entender como “y después haz”. Lo que hace es coger el resultado del código que está a la izquierda y pasarlo como primer argumento a la función que está a la derecha\n\nEjercicio 2 ¿Y si queremos hacer la raíz cuadrada de la media? ¿Cómo haríamos usando %&gt;%?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nMostrar/Ocultar solución\n\n\nSolución:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAhora vamos a trabajar con la base de datos de Alberta\n\n\nEjercicio 3 Selecciona solo las columnas de Antennaria y filtra las parcelas donde Artemisia_frigida tenga abundancia mayor que 20.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nMostrar/Ocultar solución\n\n\nSolución:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nEs importante tener en cuenta que el pipe pasa al primer argumento de la función. Cuando queremos pasar el resultado del pipe a un arguemnto que no es el primero de la función hay que poner un punto . para especificar donde debería ir."
  },
  {
    "objectID": "Tema2.html#mutate-crear-y-modificar-columnas",
    "href": "Tema2.html#mutate-crear-y-modificar-columnas",
    "title": "Tema 2. Manejo y filtrado de datos de biodiversidad.",
    "section": "3. Mutate: Crear y modificar columnas",
    "text": "3. Mutate: Crear y modificar columnas\nVamos a explorar la forma en la que podemos crear y modificar columnas con la función mutate. Por ejemplo, vamos a crear una nueva columna multiplicando por 10 la abundancida de la especie Antennaria parviflora\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLa función es muy flexible y nos permite hacer operaciones bastante complejas en un solo paso. Por ejemplo, podemos crear una variable categórica que sea “sí” cuando Antennaria parviflora es mayor 10 y “No” cuando es menor o igual a 10.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nO calcular el porcentaje de la especie con respecto al total\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n4. Tidyverse y los gráficos. Introducción a ggplot2\nggplot2 es un paquete del tidyverse para crear gráficos de manera declarativa. La idea básica es “gramática de gráficos”. Se utiliza la función ggplot, hay que definir tres elementos:\n\nLos datos que quieres graficar (data = …)\nEstética (aes()), qué variables van a los ejes, colores, tamaños, etc.\nGeometría (geom_…), cómo se representa la información (puntos, barras, líneas, cajas…).\n\nAsí, los pasos para hacer un gráfico son:\n\n\nPasos para hacer un gráfico\n\nElegir la variable para el eje x y el eje y.\nElegir el tipo de gráfico:\n\n-   `geom_point()` → scatterplot (puntos)\n\n-   `geom_col()` → barras\n\n-   `geom_boxplot()` → cajas\n\n-    `geom_line()` → líneas\n\nAñadir etiquetas y títulos para que el gráfico sea fácil de entender.\n\nVeamos un ejemplo con la base de datos de Alberta en el que representaremos la abundancia de Artemisia frigida en todas las parcelas\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\naes(x = plot, y = Artemisia_frigida) indica qué variables van a los ejes,\ngeom_col() dibuja barras verticales.\nlabs() añade títulos y etiquetas.\ntheme(axis.text.x = element_text(angle = 90, hjust = 1)) gira los nombres de las parcelas para que se lean mejor."
  },
  {
    "objectID": "Tema3-2-Metodos.html",
    "href": "Tema3-2-Metodos.html",
    "title": "Tema 3. Primera parte - Índices de diversidad",
    "section": "",
    "text": "En estas sesiones vamos a explorar índices de biodiversidad. Para ello vamos a emplear bases de datos de la abundancia de especies en herbazales de Alberta en Estados Unidos. Los datos provienen de un taller sobre análisis de la biodiversidad en R que podéis encontrar aquí\nLos datos de composición específica consisten tipicamente en observaciones de la presencia o abundancia de las especies en diferentes localidades.\nEn el ejemplo que vamos a emplear los datos provienen de un estudio de plantas que se realizó en parcelas de 20 x 20 m. Los datos de abundancia corresponden la cobertura de cada especie en proporción al total de la parcela.\n\n\nVamos a cargar los datos directamente de una página web. En R esto es muy sencillo si los datos tienen el formato adecuado. De hecho, vamos a emplear el mismo código que empleamos cuando cargamos datos desde un archivo guardado en nuestro ordenador.\nPara ver el formato en el que los datos están almacenados en la nube pinchad aquí\nCargamos los datos:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\ny echamos un vistazo a las primeras filas para comprobar que los datos se han cargado correctamente\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema3-2-Metodos.html#cargar-datos",
    "href": "Tema3-2-Metodos.html#cargar-datos",
    "title": "Tema 3. Primera parte - Índices de diversidad",
    "section": "",
    "text": "Vamos a cargar los datos directamente de una página web. En R esto es muy sencillo si los datos tienen el formato adecuado. De hecho, vamos a emplear el mismo código que empleamos cuando cargamos datos desde un archivo guardado en nuestro ordenador.\nPara ver el formato en el que los datos están almacenados en la nube pinchad aquí\nCargamos los datos:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\ny echamos un vistazo a las primeras filas para comprobar que los datos se han cargado correctamente\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema3-2-Metodos.html#resumen-de-datos",
    "href": "Tema3-2-Metodos.html#resumen-de-datos",
    "title": "Tema 3. Primera parte - Índices de diversidad",
    "section": "Resumen de datos",
    "text": "Resumen de datos\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nY le echamos un vistazo a la matriz para comprobar que todo es correcto\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nComprobamos las dimensiones de nuestra matriz que nos dicen el número de especies\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema3-2-Metodos.html#representación-de-datos",
    "href": "Tema3-2-Metodos.html#representación-de-datos",
    "title": "Tema 3. Primera parte - Índices de diversidad",
    "section": "Representación de datos",
    "text": "Representación de datos\nAdemás, es buena idea representar histogramas de distribución de datos. Por ejemplo de las especies. Esta gráfica nos muestra que en la mayor parte de las cuadrículas Antennaria parviflora tiene un cobertura entre 0 y 10 % pero que en alguna de las cuadrículas puede llegar a ocupar el 70%\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema3-2-Metodos.html#otras-operaciones-para-explorar-los-datos",
    "href": "Tema3-2-Metodos.html#otras-operaciones-para-explorar-los-datos",
    "title": "Tema 3. Primera parte - Índices de diversidad",
    "section": "Otras operaciones para explorar los datos",
    "text": "Otras operaciones para explorar los datos\nPodemos ver qué especie es la más abundante. Para ello tenemos que sumar los valores de las columnas. Podríamos hacerlo columna a columna. Por ejemplo, para la especie de la segunda columna que es Antennaria parviflora\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSi tenemos 100 especies esto implicaría repetir el código de arriba 100 veces. Sin embargo, existe una forma rápida y sintética de hacer esto mismo utilizando la función .\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAdemás podemos ver cuál de los cuadrados tiene la mayor cobertura de especies\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  }
]