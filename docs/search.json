[
  {
    "objectID": "Tema1-Intro2.html",
    "href": "Tema1-Intro2.html",
    "title": "Tema 1 - Introducción general a R. Segunda parte",
    "section": "",
    "text": "Ya hemos visto que R es un lenguaje orientado a objetos. En esta parte del tema nos vamos a centrar en entender esto mejor y explorar los distintos tipos de objetos."
  },
  {
    "objectID": "Tema1-Intro2.html#r-un-lenguaje-orientado-a-objetos",
    "href": "Tema1-Intro2.html#r-un-lenguaje-orientado-a-objetos",
    "title": "Tema 1 - Introducción general a R. Segunda parte",
    "section": "",
    "text": "Ya hemos visto que R es un lenguaje orientado a objetos. En esta parte del tema nos vamos a centrar en entender esto mejor y explorar los distintos tipos de objetos."
  },
  {
    "objectID": "Tema1-Intro2.html#tipos-de-objetos",
    "href": "Tema1-Intro2.html#tipos-de-objetos",
    "title": "Tema 1 - Introducción general a R. Segunda parte",
    "section": "2. Tipos de objetos",
    "text": "2. Tipos de objetos\nCada tipo de objeto tiene unas propiedades determinadas que estudiaremos poco a poco. Los objetos más sencillos son los vectores. Los tipos objetos de R qué trabajaremos son en principio: vectores, listas, matrices y data frames.\n\n2.1 Vectores\nUn vector es una secuencia o concatenacion de valores.\n\nCómo crear vectores\nPara definir un vector utilizamos la función c(). Dentro de los paréntesis indicamos los valores que queremos concatenar. Algunos ejemplos son:\n\n\nEjercicio 1. Crear vectores\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nEjercicio 2: Crear vectores de secuencias de números\nTambién podemos utilizar la función seq() para generar secuencias de números en un rango determinado\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAcordaros que podemos generar un vector de datos numericos de esta manera, pero si queremos guardarlo como un objeto debemos asignarle un nombre utilizando este simbolo &lt;-\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTambién podemos utilizar el símbolo : para hacer secuencias de números, o de números y texto. Podemos utilizar la función class() para preguntar de qué clase son los elementos que contiene un vector. La única regla para un vector es que solo puede contener elementos de una misma clase.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nEjercicio 3. Averiguar la longitud de un vector\nOtra función interesante es la función length(). Sirve para conocer la longitud de un vector.\n\n¿Cuál es la longitud de este otro vector?\n\n\n\nCómo acceder a los elementos de un vector\nPodemos utilizar los [] para preguntarle a un vector por valores en posiciones concretas. Por ejemplo en el vector v, consulto el valor del elemento en la posición 3.\n\nosgxedjd v[15] # puedo preguntar por un elemento que no existe. Veréis qué ocurre.}\n\nOJO ¿Qué crees que pasará si le asigno un valor no numérico?"
  },
  {
    "objectID": "Tema1-Intro2.html#qué-es-la-clase-categoría-de-un-objeto-en-r",
    "href": "Tema1-Intro2.html#qué-es-la-clase-categoría-de-un-objeto-en-r",
    "title": "Tema 1 - Introducción general a R. Segunda parte",
    "section": "2.2 ¿Qué es la clase (categoría) de un objeto en R?",
    "text": "2.2 ¿Qué es la clase (categoría) de un objeto en R?\nEn R, cada objeto tiene una clase, que le dice al lenguaje qué tipo de cosa es ese objeto y cómo debe tratarlo.\n\n\n\n\n\n\nMetáfora: la mochila de cada objeto\nImagina que cada objeto en R lleva una mochila con una etiqueta que dice:\n\n“Soy un número”, “Soy una tabla”, “Soy un texto”, “Soy una fecha”…\n\nEsa etiqueta es su clase. R la usa para saber qué puede hacer con ese objeto.\n\n\n¿Cómo averiguar la clase?\nUsamos la función class() para averiguarlo:\n\nEjercicio 4. Averiguar la clase (categoría) de un objeto\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nEjercicio 5. Explorando la importancia de la clase\nCaso 1: objeto\n\nx &lt;- 5\nclass(x)  # \"numeric\"\n\n[1] \"numeric\"\n\nmean(x)   # Resultado: 5\n\n[1] 5\n\n\n\ntexto &lt;- \"Hola\"\nclass(texto)  # \"character\"\n\n[1] \"character\"\n\nmean(texto)   # Error\n\nWarning in mean.default(texto): argument is not numeric or logical: returning\nNA\n\n\n[1] NA\n\n\n\n\n¿Qué aprendemos de esto?\n\nLas funciones en R dependen de la clase del objeto.\nSi usas una función con una clase no compatible, R te dará un mensaje de error.\nPor eso es útil usar class() o str() para diagnosticar antes de aplicar funciones.\n\nNOTA IMPORTANTE todos los elementos dentro de un vector deben ser de la misma clase\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n2.2 Listas\nLas listas son un tipo especial de objeto que puede contener elemento de diferentes clases.\nEs como un cajón de sastre: puedes meter dentro números, textos, vectores, tablas, funciones… Incluso se pueden crear listas de listas. Vamos que puedes meter lo que quieras en una lista\n\n¿Qué diferencia a una lista de un vector?\n\nUn vector normal (como c(1, 2, 3)) solo puede contener elementos del mismo tipo: todos números, o todos textos.\nUna lista, en cambio, puede mezclar tipos: puedes tener un número, un vector, una tabla, una función… todo junto.\n\n\n\nCómo crear listas\nLas listas se crean con la función list(), la cual puede tomar un número arbitrario de argumentos:\nPodemos crear una lista sencilla de elementos de la misma clase\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nO listas con elementos de clases diferentes\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nO volvernos locos y anidar listas con elementos de clases diferentes\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nCómo acceder a los elementos de una lista\nPodemos acceder por al posición de cada elemento dentro de la lista utilizando los [], parecido a cómo hacíamos con los vectores.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nmilista[1]: devuelve una sublista:\n\nEl resultado sigue siendo una lista, que contiene el primer elemento.\nEs útil si quieres mantener la estructura de lista.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nmilista[[1]]: devuelve el contenido del primer elemento\n\nEl resultado es el objeto que está dentro, no una lista.\n\nEs útil si quieres trabajar directamente con el valor.\n¿Y con las listas anidadas? ¿Cómo accedemos a los valores?\n\n\nEjercicio 5. Prueba a cambiar el número de corchetes en los dos niveles de selección\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nLos elementos de una lista pueden tener nombre\nLos elementos de una lista pueden tener nombre.\n\n\nEjercicio 6. Averiguar y poner nombre a los elementos de una lista\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nEjercicio 7. Buscar el elemento de la lista por nombre\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n2.3 Matrices\nEn R, una matriz es una estructura de datos bidimensional que contiene elementos del mismo tipo (por ejemplo, todos numéricos o todos caracteres). Es como una tabla sin nombres de columnas ni filas, donde cada celda tiene una posición definida por su fila y columna.\n\nCómo crear una matriz\nPara crear matrices utilizamos la función matrix(). La función matrix() permite organizar los datos en una matriz con tantas filas y columnas como se indiquen. Debemos indicar por lo tanto, el número de filas, el número de columnas y los datos que queremos que aparezcan en su interior. En este caso, los datos se aportan en forma de vector.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nAcceso a los elementos de una matriz\nPara acceder a los elementos de una matriz utilizamos los [], pero indicamos en su interior la posición de la fila y la columna a la cual queremos acceder. Con la , indicamos “todo” (todas las filas o todas las columnas)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nCambiar valores dentro de una matriz\nVeamos primero cómo recortar la matriz y asignarle un nombre:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPara cambiar valores concretos dentro de la matriz, primero accedermos a ese elemento y le asignamos otro valor:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTambién podemos seleccionar una submatriz, y sustituirla por otra matriz del mismo tamaño:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n2.4 Data frames\nLos data frames se utilizan para almacenar datos en formas de tablas. Es decir, en filas y columnas como se utilizan habitualmente en Excell. Esta tablas o data frames pueden almacenar datos de diferentes tipos: números, character, enteros (integer)…En un data frame cada columna representa una variable, y cada columna puede contener un tipo de elemento diferente. A diferencia de las matrices que solo pueden contener elementos del mismo tipo.\nUna de las limitaciones del data frame, es que todas las columnas tienen que tener la misma longitud. Si no fuese así, sería UNA LISTA, es decir una coleccion de objetos o variables de cualquier, tipo, longitud o estructura.\nNormalmente cuando cargamos una base de datos, o importamos una colección de datos, estamos creando un data frame. Ahora podéis comprobar que la colección de datos iris que hemos cargado anteriormente es un data frame.\n\n2.4.1 Como crear un data frame\nVamos a pedir ayuda a R sobre la función data.frame()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPodemos crear un data frame con la función data.frame()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTambién se puede crear el data frame de forma directa, sin generar los vectores previamente, así:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAhora vamos a consultar diferentes atributos con las funciones class(), mode(), is.data.frame() y is.list()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nUna característica interesantes es que un data frame también es una lista. Pero cuidado, una lista no es un data.frame. Para serlo tiene que cumplir el requisito de que todos los elementos que contiene tengan la misma longitud.\notras funciones interesantes para conocer un data frame:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n2.4.1 Acceso a los elementos de un data frame\nPara acceder a los elementos de un data frame se utilizan los [] y $, de forma similar a como hemos venido haciendo con vectores y listas.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSe pueden hacer otro tipo de consultas que nos devuelven un vector.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nVamos a acceder a los datos utilizando el simbolo $\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOtras consultas que puedo hacer sobre los datos del data frame es con las funciones dimnames(), rownames(), colnames(), table(), head() y tail()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  }
]