---
title: "Tema 1 - Introducci√≥n general a R. Primera parte"
format:
  html:
    toc: true
    toc-depth: 4
    toc-location: left
    toc_float: true
    css: estilos.css
engine: knitr
filters:
  - webr
---

## Objetivos de aprendizaje

-   Comprender qu√© es R y c√≥mo instalarlo.
-   Ejecutar comandos b√°sicos en R.
-   Familiarizarse con RStudio y su interfaz.
-   Importar y exportar datos en distintos formatos.
-   Organizar el trabajo en proyectos de R.

## 1. ¬øQu√© es R?

![](images/Imagen1.png){width="138"}

R es un lenguaje de programaci√≥n libre y gratuito, especialmente indicado para an√°lisis estad√≠stico y elaboraci√≥n de gr√°ficos.

Todo el c√≥digo de R est√° disponible como software [libre](https://es.wikipedia.org/wiki/Software_libre) bajo las condiciones de [licencia GNU-GPL](https://es.wikipedia.org/wiki/GNU_General_Public_License){.external target="_blank"}. Esto implica que cualquier usuario final puede **usar, estudiar, compartir (copiar) y modificar el software**.

Puedes acceder al proyecto R en: <http://www.r-project.org>

------------------------------------------------------------------------

## 2. Instalaci√≥n de R

Sigue las instrucciones en <https://cran.r-project.org/> para instalar R seg√∫n tu sistema operativo.

### 2.1 Usuarios de Windows

Para usuarios de Windows, selecciona el enlace **‚ÄòDownload R for Windows‚Äô**, luego haz clic en el enlace **‚Äòbase‚Äô** y finalmente en **‚ÄòDownload R 4.3.3 for Windows‚Äô**. Esto iniciar√° la descarga del archivo de instalaci√≥n `.exe`.

Una vez completada la descarga, haz doble clic en el archivo ejecutable de R y sigue las instrucciones en pantalla.

Las instrucciones completas de instalaci√≥n se pueden encontrar en el sitio web de [CRAN](https://cran.r-project.org/).

------------------------------------------------------------------------

### 2.2 Usuarios de Mac

Para usuarios de Mac, selecciona el enlace **‚ÄòDownload R for (Mac) OS X‚Äô**. El archivo binario se puede descargar seleccionando **‚ÄòR-4.3.3.pkg‚Äô**.

Una vez descargado, haz doble clic en el icono del archivo y sigue las instrucciones en pantalla para completar los pasos necesarios.

Consulta el documento [‚ÄòR for Mac OS X FAQ‚Äô](https://cran.r-project.org/bin/macosx/) para m√°s informaci√≥n sobre la instalaci√≥n.

------------------------------------------------------------------------

### 2.3 Usuarios de Linux

Para usuarios de Linux, el m√©todo de instalaci√≥n depender√° de la distribuci√≥n que est√©s utilizando. Hay instrucciones bastante completas para **Debian**, **Redhat**, **Suse** y **Ubuntu**.

En la mayor√≠a de los casos, puedes usar el gestor de paquetes de tu sistema operativo para instalar R desde el repositorio oficial.

En Ubuntu, abre una terminal y ejecuta los siguientes comandos (necesitar√°s permisos de administrador):

``` bash
sudo apt update
sudo apt install r-base
```

Si recibes un error al ejecutar los comandos anteriores, puede que necesites a√±adir una entrada a tu archivo sources.list. Para hacerlo, abre el archivo /etc/apt/sources.list en tu editor de texto favorito (gedit, vim, nano, etc.) y a√±ade la siguiente l√≠nea (tambi√©n necesitar√°s permisos de administrador):

``` bash
deb https://cloud.r-project.org/bin/linux/ubuntu disco-cran35/
```

Una vez hecho esto, vuelve a ejecutar los comandos apt anteriores y deber√≠as estar listo para comenzar.

### 2.4 Primeros ejercicios: Aprende a utilizar la consola de R

#### Abre la consola de R

![](images/Imagen2.png)

#### Ejercicio 1: Imprimir valores

```{web-r}
"Bienvenidos al curso de R y SIG"
```

```{webr-r}
1
```

#### Ejercicio 2: Operar

El uso m√°s sencillo que se le puede dar a R es el de una calculadora. Consideremos las siguientes operaciones:

-   Sumar: +

-   Restar: -

-   Multiplicar: \*

-   Dividir: /

-   Exponenciar: \^

-   M√≥dulo: %%

Los √∫ltimos dos necesitan una breve explicaci√≥n:

El operador \^ eleva el n√∫mero a la izquierda a la potencia a la derecha 3\^2 es 9

El m√≥dulo (mod) %% calcula el residuo de la divisi√≥n del n√∫mero a la izquierda por el n√∫mero a la derecha, por ejemplo 5 mod 3 o 5%%3 es 2.

```{webr-r}
2 + 2
```

```{webr-r}
10/2
```

```{webr-r}
2+7+2
```

#### Ejercicio 3: Crear objetos con `<-`

**Objetivo**: Guardar valores en objetos para usarlos m√°s adelante.

```{webr-r}
x <- 2
```

```{webr-r}
x
```

```{webr-r}
y <- 3
```

```{webr-r}
x
```

#### Ejercicio 4: Operar con objetos

```{webr-r}
x/2
```

```{webr-r}
x + y
x * y
z <- x^y
z
```

#### Ejercicio 5: Utilizar funciones

**¬øQu√© es una funci√≥n en R?**

Una **funci√≥n** en R es una herramienta que realiza una tarea espec√≠fica. Si piensas en analizar datos como si fuera cocinar las funciones son como **robots de cocina**: le das una entrada (argumentos o ingredientes), realiza una operaci√≥n (pica, tritura o calienta), y te devuelve una salida (resultado, plato hecho).

R viene con un mont√≥n de funciones listas para usar. Por ejemplo, la funci√≥n `mean()` calcula la media de un conjunto de n√∫meros.

**¬øC√≥mo usar funciones ya creadas?**

Para utilizar las funciones en R solo necesitas:

1.  **Escribir el nombre de la funci√≥n**.

2.  **Proporcionar los argumentos necesarios entre par√©ntesis**.

**Ejemplo 1: Funciones con un argumento. Calcular la media y la ra√≠z cuadrada**

```{webr-r}
mean(4)
sqrt(4)
```

**Ejemplo 2: Funciones con m√°s de un argumento. Logaritmo y redondeo**

Algunas funciones en R necesitan m√°s de un dato para funcionar. Por ejemplo, si quieres redondear un n√∫mero, puedes decirle cu√°ntos decimales usar. Puedes escribir los datos en orden o decirle a R cu√°l es cu√°l usando el nombre del argumento. As√≠ tienes m√°s control sobre lo que hace la funci√≥n.

```{webr-r}
# round(x, digits)
round(x = 3.14159, digits = 2)
```

```{webr-r}
# round(x, digits)
round(digits = 2, x = 3.14159)
```

En los ejemplos de arriba hemos nombrado los argumentos de forma expl√≠cita pero esto no es estrictamente necesario. Si no se nombran la funci√≥n opera igualmente

```{webr-r}
# round(x, digits)
round(3.14159, 2)
```

Pero **OJO üëÄ** si no nombramos los argumentos no se pueden cambiar de orden

```{webr-r}
# round(x, digits)
round(2, 3.14159)
```

## 3. ¬øQu√© es RStudio?

RStudio es un entorno de desarrollo integrado (IDE, por sus siglas en ingl√©s) dise√±ado espec√≠ficamente para trabajar con el lenguaje de programaci√≥n R. Es una herramienta que facilita la escritura de c√≥digo, la visualizaci√≥n de datos, la creaci√≥n de gr√°ficos y la elaboraci√≥n de informes.

![](images/Imagen3.png){width="236"}

------------------------------------------------------------------------

## 4 Instalaci√≥n de Rstudio

### **4.1 Windows**

1.  Ve a la p√°gina oficial: https://posit.co/download/rstudio-desktop/

2.  Haz clic en **Download RStudio for Windows**.

3.  Ejecuta el archivo `.exe` descargado.

4.  Sigue los pasos del instalador (siguiente, siguiente... ¬°listo!).

### 4.2 Linux

1.  Elige tu distribuci√≥n (Ubuntu, Fedora, etc.) en la p√°gina de descargas.

2.  **Descarga el archivo .deb** (para Ubuntu/Debian) o .rpm (para Fedora).

3.  Instala desde **terminal**:

```         
sudo dpkg -i rstudio-x.yy.zzz-amd64.deb
```

### **4.3 macOS**

1.  Descarga el instalador para macOS desde la misma p√°gina.

2.  Abre el archivo `.dmg` y arrastra RStudio a la carpeta **Aplicaciones**.

3.  √Åbrelo desde **Launchpad** o **Finder**.

------------------------------------------------------------------------

## 5 Primeros pasos en RStudio

Al abrir RStudio ver√°s cuatro paneles principales. El m√°s importante es la consola, donde puedes ejecutar comandos.

![](images/Imagen4.png)

### 5.1 Consola

-   Funci√≥n: Ejecutar c√≥digo y ver resultados inmediatos
-   Consejo: Ideal para pruebas r√°pidas y exploraci√≥n

Es igual que la consola que hemos manejado cuando hemos abierto R sin Rstudio (ver ejercicios 1 a 5)

### 5.2 Panel de edici√≥n (Script)

-   Funci√≥n: Escribir y guardar c√≥digo en archivos `.R`, `.Rmd` o `.qmd`

-   Consejo: Ejecuta l√≠neas con `Ctrl + Enter` (Windows/Linux) o `Cmd + Enter` (macOS

üßæ **¬øQu√© es un script en R?** Un script en R es un archivo de texto donde puedes escribir, guardar y reutilizar conjuntos de instrucciones. Es como una libreta de recetas para tus an√°lisis de datos.

üßë‚Äçüç≥ **Una met√°fora culinaria:** Si pensamos en el an√°lisis de datos como si fuera una actividad de cocina, un script ser√≠a como tu libro de cocina:

Cada l√≠nea de c√≥digo es como un paso de una receta. Puedes seguirla paso a paso, modificar ingredientes (datos) o repetirla cuando quieras. Guardar tus scripts te permite documentar tu trabajo y reproducir tus an√°lisis f√°cilmente.

#### Ejercicio 6: Crea y guarda tu primer script

En este ejercicio aprender√°s a crear tu primer script en R usando RStudio. Un script es un archivo donde puedes escribir y guardar tu c√≥digo para ejecutarlo m√°s tarde.

**Paso 1: Abrir el editor de scripts**

Ve al men√∫ *File \> New File \> R Script*.

**Paso 2: Escribir tu primer script de c√≥digo**

Escribe el siguiente c√≥digo en el script:

```{webr-r}
# Mi primer script en R
x <- 5
y <- 3
suma <- x + y
print(suma)
```

**Paso 3: Guarda tu primer script**

Una vez que hayas escrito tu c√≥digo en el editor de panel de edici√≥n, sigue estos pasos para guardarlo:

1.  Haz clic en el men√∫ **File** (Archivo).

2.  Selecciona **Save** o presiona el atajo de teclado `Ctrl + S` (Windows/Linux) o `Cmd + S` (macOS).

3.  Elige una carpeta donde quieras guardar tu archivo.

4.  Escribe un nombre para tu script, por ejemplo: `primer_script.R`

5.  Haz clic en **Guardar**.

#### Ejercicio 7: Ejecuta el c√≥digo del script

**Ejecutar una sola l√≠nea**

1.  Coloca el cursor en la l√≠nea que quieres ejecutar.

2.  Presiona `Ctrl + Enter` (Windows/Linux) o `Cmd + Enter` (macOS).

3.  El resultado aparecer√° en la **consola** (panel inferior izquierdo).

**Ejecutar varias l√≠neas**

1.  Selecciona varias l√≠neas de c√≥digo con el rat√≥n o el teclado.

2.  Presiona `Ctrl + Enter` o `Cmd + Enter`.

3.  Todas las l√≠neas seleccionadas se ejecutar√°n en orden.

**Ejecutar todo el script**

1.  Ve al men√∫ **Code \> Run Region \> Run All**\
    o haz clic en el bot√≥n **Source** (√≠cono de hoja con flecha verde) en la parte superior del script.

2.  Tambi√©n puedes usar el atajo `Ctrl + Shift + Enter` (`Cmd + Shift + Enter` en macOS).

3.  Todo el contenido del script se ejecutar√° en la consola.

### 5.3 Entorno de trabajo / Historial

-   Funci√≥n: Ver objetos creados (variables, funciones, etc.) y el historial de comandos

**Consejo**: √ötil para revisar qu√© has hecho y qu√© est√° disponible

En R, el entorno de trabajo es el espacio donde se almacenan los objetos que creamos (vectores, funciones, data frames, etc.). Podemos inspeccionar, modificar y limpiar este entorno usando funciones espec√≠ficas.

#### Ejercicio 8: Crear, listar y borrar objetos en el entorno de trabajo

```{webr-r}
# Crear algunos objetos
x <- 10
y <- c(1, 2, 3)
nombre <- "mi nombre"
```

```{webr-r}
# Ver todos los objetos en el entorno
ls()
```

```{webr-r}
# Eliminar un objeto
rm(x)

# Verificar que se ha eliminado
ls()
```

#### 5.4 Archivos / Gr√°ficos / Paquetes / Ayuda / Viewer

-   Funci√≥n:
    -   Ver gr√°ficos generados
    -   Gestionar paquetes
    -   Consultar ayuda de funciones
    -   Navegar por archivos del proyecto

Este panel de RStudio permite gestionar varios aspectos clave del entorno de trabajo. Vamos a centrarnos en paquetes, con ejemplos aplicados a biodiversidad.

Paquetes Los paquetes en R son colecciones de funciones, datos y documentaci√≥n que ampl√≠an las capacidades b√°sicas del lenguaje. Para trabajar con biodiversidad, hay paquetes muy √∫tiles que permiten cargar datos ecol√≥gicos, calcular √≠ndices de diversidad, y visualizar mapas o redes de especies.

#### ¬øC√≥mo se instalan y cargan?

:::¬†{.callout-warning}

Los siguientes jercicioes¬†requieren¬†el¬†paquete¬†\`vegan\`,¬†que¬†no¬†est√°¬†disponible¬†en¬†webR.¬†Para¬†ejecutarlo,¬†usa¬†R¬†en¬†tu¬†ordenador¬†local.

:::

```{reval=false}
install.packages("vegan")   # Instalaci√≥n
library(vegan)              # Carga del paquete
```

#### ¬øC√≥mo se usan los paquetes?

```{reval=false}
?vegan
help("vegan")

```

#### Ejercicio 9. Uso de la funci√≥n `specnumber` del paquete `vegan`

```{reval=false}
# Datos de abundancia de especies en dos sitios para el ejercicio
datos <- data.frame(
  sitio1 = c(3, 0, 1, 5),
  sitio2 = c(0, 2, 0, 4),
  row.names = c("Aves", "Mam√≠feros", "Reptiles", "Insectos")
)
datos

# Cargar el paquete
library(vegan)

# explorar para qu√© sirve la funci√≥n specnumber
?specnumber

# Calcular riqueza (n√∫mero de especies presentes)
riqueza <- specnumber(datos)
riqueza
```

## 6. Aprender a cargar y guardar datos

### 6.1 Importar datos al entorno de trabajo

Para poder proceder con un an√°lisis de datos, debemos cargar los datos en `R`. En este tutorial aprenderemos a importar y exportar datos en diferentes formatos. Hemos seleccionado los m√°s comunmente utilizados.

Podemos importar en formato texto o tabulares desde un archivo `.txt` o `.csv` Podemos importar directamente desde Excel, archivos `.xls` o `.xlxs` Tambi√©n existen formatos propios de R, como los `.Rdata` o `.rda` y los serialized `R` objects `.rds`

### 6.2 Cargar datos integrados

R viene con varios conjuntos de datos ya cargados que puedes usar para practicar sin tener que importar nada. Puedes escribir¬†`data()`¬†para ver la lista completa.

Para cargar los datos integrados basta con escribir data() y el nombre de los datos.

![](images/Imagen5.png)

#### Ejercicio 10: Cargar datos integrados

Durante este ejercicio vamos a utilizar el conjunto o set de datos `iris`. Este conjunto de datos, contiene datos sobre caracter√≠sticas florales de tres especies del g√©nero *Iris*.

Para cargarlo utilizaremos la funci√≥n `data()`, y lo exploraremos utilizando la funci√≥n `head()` que nos permite visualizar las primeras 6 filas. Tambi√©n vamos a introducir nuevas funciones que nos permitir√°n explorar el conjunto de datos iris: `dim()` `colnames()` y `tail()`

```{webr-r}

data(iris)# para cargar los datos 

```

```{webr-r}
?iris # consulta sobre el data set 
```

```{webr-r}
head(iris) # muestra las primeras 6 filas de un data set 
```

```{webr-r}

dim(iris) # dimensiones del data set iris 
```

```{webr-r}
tail(iris) # muestra las ultimas 6 filas de un data set 
```

```{webr-r}
colnames(iris)# la funcion colnames() nos muestra los nombres de las variables de iris 
```

```{webr-r}
names(iris) # la funcion names() nos muestra los nombres de las variables de iris
```

### **6.3 Importar datos desde CSV**

Aunque esta forma de importar datos puede ser muy √∫til para probar funciones o aprender a escribir c√≥digo lo normal es que queramos cargar una base de datos propia. Uno de los formatos m√°s sencillo de importar y que adem√°s ofrece buenas propiedades de interoperabilidad es el `.csv`

Vamos a trabajar con los datos de una base de datos de la abundancia de especies en herbazales de Alberta en Estados Unidos.

Comenzaremos por descargar los datos desde [aqu√≠](https://github.com/ngmedina/UAMBioDivR/blob/main/Alberta%20grassland/grassland.community.csv)

##### NOTA: Los datos originales provienen de un taller sobre an√°lisis de la biodiversidad en R que se pueden encontrar [aqu√≠](https://kembellab.ca/r-workshop/).

Para cargar el archivo tienes que cambiar el texto "path_to_my_data" por la ruta del archivo. Para ello:

1.  Busca el archivo en la carpeta "Descargas"

    Abre el Explorador de archivos. Ve a Descargas y localiza el archivo que quieres usar (por ejemplo, datos.csv).

2.  Haz clic derecho sobre el archivo

    Selecciona "*Propiedades*".

    Copia la Ruta de acceso que aparece (por ejemplo: C:\\Users\\TuNombre\\Downloads\\datos.csv).

3.  Cambia las barras invertidas \\ por barras normales /

```{webr-r}

read.csv("C:/Users/TuNombre/grassland.community.csv")
```

**OJO ¬øQu√© ha pasado?**

Cuando ejecutamos el c√≥digo, R¬†**lee el archivo**¬†y muestra el contenido en la consola, pero¬†**no lo guarda**. Es como mirar el resultado sin ponerle nombre: lo ves, pero no puedes volver a usarlo f√°cilmente.

**¬øC√≥mo guardarlo?**

Para guardar el resultado, hay que **asignarlo a un objeto** usando `<-`:

```{webr-r}
datos_alberta <- read.csv("C:/Users/TuNombre/grassland.community.csv")
```

#### **Truco: Usar el panel √Årea de trabajo "Environment" para cargar archivos**

1.  **Haz clic en el bot√≥n "Import Dataset"**\
    En el panel *Environment*, busca el bot√≥n que dice **"Import Dataset"** y haz clic.

2.  **Selecciona "From Text (base)"**\
    Si tu archivo es `.csv` o `.txt`, elige esta opci√≥n.

3.  **Haz clic en "Browse..."**\
    Se abrir√° una ventana para buscar el archivo.\
    üìÅ Navega a la carpeta **Descargas** y selecciona tu archivo.

4.  **RStudio genera el c√≥digo autom√°ticamente**\
    Ver√°s una vista previa del archivo y RStudio te mostrar√° el c√≥digo que usar√° para cargarlo.\
    Puedes copiar ese c√≥digo para usarlo en tus scripts.

### **6.4 EXTRA: Importar datos desde Excell** {style="color: blue;"}

Importar datos desde Excell es muy parecido a la importaci√≥n de datos desde `.csv`. Las funciones que utilizaremos son `write.xlsx()` para la exportaci√≥n y `read.xlsx()` para la importaci√≥n.

Debemos instalar primero el paquete `xlsx`

#### Ejercicio Extra Importar datos desde excel

```{r}
# instalar el paquete
# install.packages("xlsx")  

# abrir la librer√≠a
library(xlsx)  

write.xlsx(iris, "data/iris.xlsx")  # acuerdate que los vamos a guardar en la carpeta datos  

iris_import_xlsx <- read.xlsx("data/iris.xlsx", 1) # debemos indicar la hoja de Excell desde la cual importar los datos

```

## 7. Errores comunes al cargar archivos CSV en R

Comenzaremos por descargar los datos desde [aqu√≠](https://github.com/ngmedina/cursobioR/blob/main/data/datos_con_errores.csv)

Intenta cargar el archivo datos_con_errores.csv

```{webr-r}
# read.csv("C:/Users/TuNombre/datos_con_errores.csv") # T√∫ c√≥digo deber√≠a ser algo as√≠ o bien selecciona el archivo ejecutando el siguiente c√≥digo
read.csv(choose.files())
```

### Paso 1: Verificar el entorno

¬øEst√° el archivo en el directorio correcto?

```{webr-r}
getwd()
# ¬øVes el archivo 'datos_con_errores.csv' aqu√≠?
```

------------------------------------------------------------------------

### Paso 2: Cargar el archivo sin argumentos

Intenta cargar el archivo tal cual. ¬øQu√© ves?

```{webr-r}
datos <- read.csv("https://raw.githubusercontent.com/ngmedina/cursobioR/main/data/datos_con_errores.csv")
datos
```

**Pregunta:** ¬øQu√© problemas puedes detectar en los datos cargados?

------------------------------------------------------------------------

### Paso 3: Codificaci√≥n de caracteres

Algunos acentos pueden verse mal. Prueba con otra codificaci√≥n:

```{webr-r}
datos <- read.csv("https://raw.githubusercontent.com/ngmedina/cursobioR/main/data/datos_con_errores.csv", fileEncoding = "latin1")
datos
```

------------------------------------------------------------------------

### Paso 4: Separadores incorrectos

La √∫ltima fila usa punto y coma. ¬øC√≥mo lo solucionamos?

```{webr-r}
datos <- read.csv("https://raw.githubusercontent.com/ngmedina/cursobioR/main/data/datos_con_errores.csv", fileEncoding = "latin1", sep = ",")
datos
```

------------------------------------------------------------------------

### Paso 5: Valores ausentes

Algunas celdas est√°n vac√≠as. ¬øC√≥mo las identificamos?

```{webr-r}
datos <- read.csv("data/datos_con_errores.csv", fileEncoding = "latin1", na.strings = c("", "NA", ".", "?"))
summary(datos)
```

------------------------------------------------------------------------

### Paso 6: Tipos de datos

¬øEdad es num√©rica?

```{webr-r}
str(datos)
```

Corrige los tipos:

```{webr-r}
datos$Edad <- as.numeric(datos$Edad)

```

#### Ejercicio extra. Trabajando con fechas {style="color: blue;"}

¬øFecha es tipo Date?

```{webr-r}
str(datos)
datos$Fecha <- as.Date(datos$Fecha, format = "%Y-%m-%d")
```

NOTA: Fechas en R. Si quieres ampliar pincha [aqu√≠](https://excelkingdom.blogspot.com/2018/11/how-to-format-date-values-in-r.html)

| **S√≠mbolo** | **Significado**  | **Ejemplo** |
|:------------|:-----------------|:------------|
| `%Y`        | A√±o con 4 cifras | `2025`      |
| `%m`        | Mes con 2 cifras | `09`        |
| `%d`        | D√≠a con 2 cifras | `24`        |

------------------------------------------------------------------------

### Paso 7: Limpiar comillas y comentarios

A veces, al importar datos, los nombres vienen entre comillas, como "Carlos" en lugar de Carlos. Esto puede causar problemas al filtrar, comparar o visualizar los datos.

```{webr-r}
datos$Nombre <- gsub('"', '', datos$Nombre)
```

**¬øQu√© hace esta l√≠nea?**

-   `gsub()` es una funci√≥n que **busca y reemplaza texto**.

-   El primer argumento (`'"'`) indica qu√© queremos eliminar: las comillas dobles.

-   El segundo (`''`) indica con qu√© lo queremos reemplazar: en este caso, con nada.

-   El tercero (`datos$Nombre`) es la columna donde aplicamos el cambio.

```{webr-r}
# Antes

datos$Nombre

# [1] "\"Carlos\"" "Ana" "Luis"

# Despu√©s

datos$Nombre <- gsub('"', '', datos$Nombre)

datos$Nombre

#[1] "Carlos" "Ana" "Luis"
```

------------------------------------------------------------------------

### Paso final: Ver datos limpios

```{webr-r}
View(datos)
```

**Reflexi√≥n:** ¬øQu√© aprendiste sobre los errores comunes al cargar datos?
